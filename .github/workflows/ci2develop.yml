name: Change Detection

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  detect-changes-by-component:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      scheduler: ${{ steps.filter.outputs.scheduler }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
          scheduler:
            - 'scheduler/**'
          frontend:
            - 'frontend/**'

  versioning:
    needs: detect-changes-by-component
    if: ${{ needs.detect-changes-by-component.outputs.backend == 'true' || needs.detect-changes-by-component.outputs.scheduler == 'true' || needs.detect-changes-by-component.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      backend_version: ${{ steps.versions.outputs.backend_version }}
      scheduler_version: ${{ steps.versions.outputs.scheduler_version }}
      frontend_version: ${{ steps.versions.outputs.frontend_version }}
    steps:
      - name: Get and bump versions
        id: versions
        run: |
          get_and_bump_version() {
            local HARBOR_PROJECT="code-place-dev"
            local HARBOR_REPO="$1"
            local LATEST_VERSION=$(curl -s -X GET -u "${{ secrets.HARBOR_USERNAME }}:${{ secrets.HARBOR_PASSWORD }}" \
              "https://${{ secrets.HARBOR_REGISTRY }}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${HARBOR_REPO}/artifacts?page=1&page_size=1&with_tag=true" \
              | jq -r '.[0].tags[1].name')
            if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
              echo "0.0.1"
            else
              IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
              PATCH=$((VERSION_PARTS[2] + 1))
              echo "${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
            fi
          }

          if [ "${{ needs.detect-changes-by-component.outputs.backend }}" == "true" ]; then
            BACKEND_VERSION=$(get_and_bump_version "backend")
            echo "::set-output name=backend_version::$BACKEND_VERSION"
            echo "New version for backend: $BACKEND_VERSION"
          fi

          if [ "${{ needs.detect-changes-by-component.outputs.scheduler }}" == "true" ]; then
            SCHEDULER_VERSION=$(get_and_bump_version "scheduler")
            echo "::set-output name=scheduler_version::$SCHEDULER_VERSION"
            echo "New version for scheduler: $SCHEDULER_VERSION"
          fi

          if [ "${{ needs.detect-changes-by-component.outputs.frontend }}" == "true" ]; then
            FRONTEND_VERSION=$(get_and_bump_version "frontend")
            echo "::set-output name=frontend_version::$FRONTEND_VERSION"
            echo "New version for frontend: $FRONTEND_VERSION"
          fi

  ci-backend:
    needs: [versioning, detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Harbor
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/backend:${{ needs.versioning.outputs.new_version }}
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/backend:latest

    - name: Backend changes detected and built
      run: echo "backend 변경 감지 및 빌드 완료"

  ci-scheduler:
    needs: [versioning, detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.scheduler == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Harbor
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./scheduler
        file: ./scheduler/Dockerfile
        push: true
        tags: |
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/scheduler:${{ needs.versioning.outputs.new_version }}
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/scheduler:latest

    - name: Backend changes detected and built
      run: echo "scheduler 변경 감지 및 빌드 완료"

  ci-frontend:
    needs: [versioning, detect-changes-by-component]
    if: ${{ needs.detect-changes-by-component.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Harbor
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/frontend:${{ needs.versioning.outputs.new_version }}
          ${{ secrets.HARBOR_REGISTRY }}/code-place-dev/frontend:latest

    - name: Backend changes detected and built
      run: echo "frontend 변경 감지 및 빌드 완료"